version: "3.4"
services:
  nginx:
    image: nginx:stable
    container_name: nginx
    profiles:
      - dev
    ports:
      - 80:80
    volumes:
      - ./compose/nginx:/etc/nginx/conf.d/
    depends_on:
      - clinwiki
  nginx-prod:
    image: nginx:stable
    container_name: nginx-prod
    profiles:
      - prod
    build:
      context: .
      dockerfile: heroku/Dockerfile
    volumes:
      - ./heroku/nginx/templates:/etc/nginx/templates
  db:
    image: postgres:11.8
    container_name: clinwiki-db
    profiles:
      - dev
    ports:
      - 15432:5432
    volumes:
      - cw-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=$POSTGRES_USER
      - POSTGRES_PASSWORD=$POSTGRES_PASSWORD
  elastic:
    image: elasticsearch:6.8.8
    container_name: elastic
    profiles:
      - dev
    ports:
      - 9200:9200
    environment:
      - discovery.type=single-node
      - http.port=9200
      - http.cors.enabled=true
      - http.cors.allow-origin=http://localhost:3030,http://127.0.0.1:3030,http://localhost:1358,http://127.0.0.1:1358,https://opensource.appbase.io
      - http.cors.allow-headers=X-Requested-With,X-Auth-Token,Content-Type,Content-Length,Authorization
      - http.cors.allow-credentials=true
      - xpack.security.enabled=true
      - ELASTIC_PASSWORD=$ELASTIC_PASSWORD
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - es-data:/usr/share/elasticsearch/data/
  # kibana:
  #   image: docker.elastic.co/kibana/kibana:6.8.0
  #   container_name: kibana
  #   profiles:
  #     - dev
  #   environment:
  #     - ELASTICSEARCH_HOSTS=http://elastic:9200/
  #     - ELASTICSEARCH_USERNAME=elastic
  #     - ELASTICSEARCH_PASSWORD=$ELASTIC_PASSWORD
  #   ports:
  #     - 5601:5601
  redis:
    image: redis:5.0.5
    container_name: redis
    profiles:
      - dev
    volumes:
      - redis-data:/data
  clinwiki:
    image: cwlite
    build:
      context: .
      dockerfile: compose/Dockerfile
    container_name: clinwiki
    profiles:
      - dev
    ports:
      - 3000:3000
    volumes:
      - .:/clinwiki
      - ./compose/entrypoint.sh:/usr/bin/entrypoint.sh
      - node_modules:/clinwiki/front/node_modules
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@db:5432
      - REDIS_URL=redis://redis:6379/0
      - SEARCHBOX_URL=http://elastic:$ELASTIC_PASSWORD@elastic:9200/
    depends_on:
      - db
      - elastic
      - redis
  # sidekiq:
  #   image: cwlite
  #   build:
  #     context: .
  #     dockerfile: compose/Dockerfile
  #   container_name: sidekiq
  #   volumes:
  #     - .:/clinwiki
  #   env_file:
  #     - .env
  #   environment:
  #     - DATABASE_URL=postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@db:5432
  #     - REDIS_URL=redis://redis:6379/0
  #     - SEARCHBOX_URL=http://elastic:$ELASTIC_PASSWORD@elastic:9200/
  #   depends_on:
  #     - db
  #     - elastic
  #     - redis
  #   command: bundle exec sidekiq -C config/sidekiq.yml
  nodejs:
    image: keymetrics/pm2:14-alpine
    env_file:
      - .env
    build:
      context: .
      dockerfile: api/Dockerfile
    command: npm start
    container_name: nodejs
    profiles:
      - dev
    volumes:
      - .:/api
    ports:
      - 8088:8088
    environment:
      - DATABASE_URL_NODE=postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@db:5432
      - SEARCHBOX_URL_NODE=http://elastic:$ELASTIC_PASSWORD@elastic:9200/
    depends_on:
      - db
      - elastic
  nodejs-prod:
    image: keymetrics/pm2:14-alpine
    env_file:
      - .env
    build:
      context: .
      dockerfile: api/Dockerfile
    command: npm start
    container_name: nodejs-prod
    profiles:
      - prod
    volumes:
      - .:/api
    ports:
      - 8088:8088
  data-pipeline:
    image: keymetrics/pm2:14-alpine
    env_file:
      - .env
    build:
      context: .
      dockerfile: api/Dockerfile
    command: npm run pipeline-start
    container_name: data-pipeline
    profiles:
      - dev
    volumes:
      - .:/api
    environment:
      - DATABASE_URL_NODE=postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@db:5432
      - SEARCHBOX_URL_NODE=http://elastic:$ELASTIC_PASSWORD@elastic:9200/
    depends_on:
      - db
      - elastic
  graphql-engine:
    image: hasura/graphql-engine:latest
    container_name: hasura
    profiles:
      - dev
    ports:
      - 5532:5532
    depends_on:
      - "db"
    environment:
      HASURA_GRAPHQL_DATABASE_URL: "postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@db:5432"
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      HASURA_GRAPHQL_ADMIN_SECRET: nlYl98VbkFw9
      HASURA_GRAPHQL_UNAUTHORIZED_ROLE: anonymous
      HASURA_GRAPHQL_SERVER_PORT: 5532

volumes:
  es-data:
  cw-data:
  redis-data:
  node_modules:
